[
	// { "keys": ["ctrl+/"], "command": "toggle_comment", "args": { "block": false } },
	// { "keys": ["ctrl+shift+/"], "command": "toggle_comment", "args": { "block": true } },

	{ "keys": ["super+forward_slash"], "command": "toggle_comment", "args": { "block": false } },
	{ "keys": ["super+alt+forward_slash"], "command": "toggle_comment", "args": { "block": true } },

	// Swap the keybindings for paste and paste_and_indent.
	{ "keys": ["super+v"], "command": "paste_and_indent" },
	{ "keys": ["super+alt+v"], "command": "paste" },
	{ "keys": ["alt+w"], "command": "close_all" },
	{ "keys": ["ctrl+alt+m"], "command": "markdown_preview", "args": {"target": "browser", "parser":"markdown"} },

	{ "keys": ["alt+up"], "command": "expand_region" },
	{
	  "keys": ["alt+down"],
	  "command": "expand_region",
	  "args": {"undo": true},
	  "context": [{ "key": "expand_region_soft_undo" }]
	},
	{ "keys": ["super+\\"], "command": "toggle_side_bar" },

	// Sublime CodeIntel.
	{ "keys": ["shift+ctrl+space"], "command": "code_intel_auto_complete" },
	{ "keys": ["shift+ctrl+alt+up"], "command": "goto_python_definition"},
	{ "keys": ["super+shift+alt+left"], "command": "back_to_python_definition"},

	// Codebug.
	{ "keys": ["alt+super+b"], "command": "codebug" },

	// Sublime Linter.
	{ "keys": ["ctrl+super+l"], "command": "sublimelinter_lint" },
	{ "keys": ["ctrl+super+k"], "command": "sublimelinter_show_all_errors" },

	// Allignement.
	{ "keys": ["super+ctrl+a"], "command": "alignment" },

	// Inc Dec Values.
	{ "keys": ["alt+super+up"],        "command": "inc_dec_value", "args": { "action": "inc_min" } },
	{ "keys": ["alt+super+down"],      "command": "inc_dec_value", "args": { "action": "dec_min" } },
	{ "keys": ["alt+super+insert"],    "command": "inc_dec_value", "args": { "action": "ins_min" } },

	{ "keys": ["shift+alt+super+up"],        "command": "inc_dec_value", "args": { "action": "inc_max" } },
	{ "keys": ["shift+alt+super+down"],      "command": "inc_dec_value", "args": { "action": "dec_max" } },
	{ "keys": ["shift+alt+super+insert"],    "command": "inc_dec_value", "args": { "action": "ins_max" } },

	{ "keys": ["super+alt+shift+up"],   "command": "inc_dec_value", "args": { "action": "inc_all" } },
	{ "keys": ["super+alt+shift+down"], "command": "inc_dec_value", "args": { "action": "dec_all" } },
	{ "keys": ["super+alt+shift+insert"],"command":"inc_dec_value", "args": { "action": "ins_all" } },

	// Emmet JSX.
	{
	  "keys": ["tab"],
	  "command": "expand_abbreviation_by_tab",

	  // put comma-separated syntax selectors for which
	  // you want to expandEmmet abbreviations into "operand" key
	  // instead of SCOPE_SELECTOR.
	  // Examples: source.js, text.html - source
	  "context": [
	    {
	      "operand": "meta.group.braces.round.js, text.html",
	      "operator": "equal",
	      "match_all": true,
	      "key": "selector"
	    },

	    // run only if there's no selected text
	    {
	      "match_all": true,
	      "key": "selection_empty"
	    },

	    // don't work if there are active tabstops
	    {
	      "operator": "equal",
	      "operand": false,
	      "match_all": true,
	      "key": "has_next_field"
	    },

	    // don't work if completion popup is visible and you
	    // want to insert completion with Tab. If you want to
	    // expand Emmet with Tab even if popup is visible --
	    // remove this section
	    // {
	    //   "operand": false,
	    //   "operator": "equal",
	    //   "match_all": true,
	    //   "key": "auto_complete_visible"
	    // },
	    // {
	    //   "match_all": true,
	    //   "key": "is_abbreviation"
	    // }
	  ]
	}
]
